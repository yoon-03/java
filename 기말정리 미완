# 메소드 규칙
  1. 숫자로 시작하면 안됨
  2. $와_를 제외한 특수문자를 사용하면 안됨
  3. 관례적으로 메소드명은 소문자로 작성
  4. 서로 다른 단어가 혼합된 이름이라면 뒤에 오는 단어의 첫글자는 대문자

메소드 호풀
  클래스 내부 : 메소드 이름으로 호출
  클래스 외부 : 객체 생성 후, 참조 변수를 이용해서 호출

메소드 오버로딩
  클래스 내에 같은 이름의 메소드를 여러 개 선언하는 것
  하나의 메소드 이름으로 다양한 매개값을 받기 위해(ex public int num(string s) , public int num(string s, int i))
  조건: 매개변수의 타입, 개수 , 순서 중 하나라도 달라야함 

인스턴스 멤버
  this
    객체 자신의 참조를 가지고 있는 키워드
    객체 내부에서 인스턴스 멤버임을 명확히 하기 위해 this.사용 (this.model = model;)
    매개변수와 필드명이 동일할 때 인스턴스 필드임을 명확히 하기 위해 사용

  인스턴스는 클래스로부터 생성된 개별적인 객체로 new키워드를 사용하여 객체를 생성할 때마다 힙메모리 영역에 할당됨
  접근 방법 = 객체.멤버이름 으로 접근 //Student student1 = new Student();

정적
  처음 설정되어 값을 바꾸지않고 그냥 출력  //System.out.println("값 :" + resource);


# 상속
  패키지 : 클래스를 기능별로 묶어서 그룹 이름을 붙여놓은 것 ( = 폴더)으로 클래스 이름의 일부 
          클래스 파일은 선언된 패키지와 동일한 폴더 안에서만 동작

  import문을 이용하여 다른 패키지에 있는 클래스를 사용함
  import Java.util.~~을 사용하여 스캐너를 사용하는 것을 생각
  import 문으로 지정된 패키지의 하위패키지는import 대상이 아님
  서로다른패키지에동일한이름의클래스가있는경우
  import 문을 사용하더라도 패키지 이름 전체를기술해야함

  접근제한자
    public: 전부 접근 가능      //라이브러리 클래스로 만들때 유용
    protected: 자식 클래스가 아닌 다른 패키지에 소속된 클래스
    default: 다른 패키지에 소속된 클래스 제외  //접근 제한자를 설정하지 않았을시 기본으로 설정됨
    private: 다른 모든 외부 클래스는 접근 불가


  클래스 선언 시 필드는 일반적으로 private 접근 제한
    읽기 전용 필드 (getter)
    외부에서 엉뚱한 값으로 변경할 수 없도록(setter)

  getter : private 필드의 값을 리턴하는 역할

  setter : 외부에서 주어진 값을 필드 값으로 수정

  extends를 사용하여 상속받음  //public class A extends A{ } (부모 클래스 나열 불가 (단일상속))
  상속의 효과
    부모 클래스를 재사용해서 자식 클래스를 빨리 개발 가능
    반복된 코드 중복을 줄임
    유지 보수 편리성 제공
    객체 다형성 구현이 가능 

상속 대상 제한
  부모 클래스의 private 접근을 갖는 필드와 메소드는 제외
  부모 클래스가 다른 패키지에 있을 경우  (default 접근을 갖는 필드와 메소드도 제외)  

명시적인 부모 생성자 호출 (Super)    //여긴 나중에 완성

메소드 재정의 (override)
  부모 클래스의 메소드를 자식 클래스에서 상속하여 재정의하는 것

  조건
    부모 클래스의 메소드와 동일한 모양을 가져야 함, 접근 제한을 더 강하게 오버라이딩 불가     

메소드 재정의 효과
  부모 메소드는 숨겨지는 효과
재정의된 자식 클래스의 메소드가 실행됨
